package com.test.bean;

import static org.tquadrat.foundation.ui.spi.I18nUtil.resolveMessage;
import static org.tquadrat.foundation.util.Objects.isNull;
import static org.tquadrat.foundation.util.Objects.requireNonNullArgument;
import static org.tquadrat.foundation.util.Stringer.BASE_STRINGER;

import java.io.IOException;
import java.io.OutputStream;
import java.lang.Boolean;
import java.lang.CharSequence;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.SuppressWarnings;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.tquadrat.foundation.annotation.ClassVersion;
import org.tquadrat.foundation.ui.cli.BooleanValueHandler;
import org.tquadrat.foundation.ui.cli.DateValueHandler;
import org.tquadrat.foundation.ui.cli.StringValueHandler;
import org.tquadrat.foundation.ui.configuration.ConfigurationChangeListener;
import org.tquadrat.foundation.ui.spi.CLIArgumentDefinition;
import org.tquadrat.foundation.ui.spi.CLIDefinition;
import org.tquadrat.foundation.ui.spi.CLIOptionDefinition;
import org.tquadrat.foundation.ui.spi.CmdLineException;
import org.tquadrat.foundation.ui.spi.CmdLineValueHandler;
import org.tquadrat.foundation.ui.spi.ConfigChangeListenerSupport;
import org.tquadrat.foundation.ui.spi.ConfigUtil;
import org.tquadrat.foundation.util.AutoLock;
import org.tquadrat.foundation.util.Objects;

/**
 * The configuration bean that implements
 * {@link ConfigBeanSpec}.
 */
@ClassVersion( sourceVersion = "Generated by 'org.tquadrat.foundation.ui.ap.configgenerator.ConfigurationBeanCodeGenerator' (Version: ${Version}) at 2018-09-11T15:30:00Z", isGenerated = true )
public final class CLIBean implements ConfigBeanSpec
{
        /*------------*\
    ====** Attributes **=======================================================
        \*------------*/
    @SuppressWarnings( "javadoc" )
    private boolean m_BoolArgument = false;

    @SuppressWarnings( "javadoc" )
    private boolean m_BoolOption = false;

    @SuppressWarnings( "javadoc" )
    private Boolean m_BooleanArgument;

    @SuppressWarnings( "javadoc" )
    private Boolean m_BooleanOption;

    /**
     * The registry for the CLI definitions
     */
    private final List<CLIDefinition> m_CLIDefinitions = new ArrayList<>();

    /**
     * The last error message from a call to
     * {@link #parseCommandLine(String[])}.
     *
     * @see #retrieveParseErrorMessage()
     */
    private String m_CLIErrorMessage = null;

    @SuppressWarnings( "javadoc" )
    private Date m_DateArgument;

    @SuppressWarnings( "javadoc" )
    private Date m_DateOption;

    @SuppressWarnings( "javadoc" )
    private boolean m_Debug = Boolean.getBoolean( "isDebug" );

    /**
     * The support for the configuration change listener.
     */
    private final ConfigChangeListenerSupport m_ListenerSupport;

    @SuppressWarnings( "javadoc" )
    private Locale m_Locale = Locale.getDefault();

    /**
     * The read lock.
     */
    private final AutoLock m_ReadLock;

    @SuppressWarnings( "javadoc" )
    private ResourceBundle m_ResourceBundle = null;

    @SuppressWarnings( "javadoc" )
    private String m_StringArgument;

    @SuppressWarnings( "javadoc" )
    private String m_StringOption;

    @SuppressWarnings( "javadoc" )
    private boolean m_Test = Boolean.getBoolean( "isTest" );

    @SuppressWarnings( "javadoc" )
    private ZoneId m_Timezone = ZoneId.systemDefault();

    /**
     * The write lock.
     */
    private final AutoLock m_WriteLock;

        /*--------------*\
    ====** Constructors **=====================================================
        \*--------------*/
    /**
     * Creates a new {@code CLIBean} instance.
     */
    public CLIBean()
    {
        /*
         * Initialise the standard fields
         */
        m_ListenerSupport = new ConfigChangeListenerSupport( this );
        var lock = new ReentrantReadWriteLock();
        m_ReadLock = AutoLock.of( lock.readLock() );
        m_WriteLock = AutoLock.of( lock.writeLock() );

        /*
         * Initialise the CLI definitions.
         */
        CmdLineValueHandler<?> valueHandler;
        CLIDefinition cliDefinition;

        valueHandler = new BooleanValueHandler( (propName,value) -> m_BoolArgument = value );
        cliDefinition = new CLIArgumentDefinition( "boolArgument", 3, null, "com.test.bean.ConfigBeanSpec.USAGE_BoolArgument", "BOOL_ARGUMENT", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new BooleanValueHandler( (propName,value) -> m_BooleanArgument = value );
        cliDefinition = new CLIArgumentDefinition( "booleanArgument", 2, null, "com.test.bean.ConfigBeanSpec.USAGE_BooleanArgument", "BOOLEAN_ARGUMENT", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new BooleanValueHandler( (propName,value) -> m_BooleanOption = value );
        cliDefinition = new CLIOptionDefinition( "booleanOption", List.of( "--Flag", "-F" ), null, "com.test.bean.ConfigBeanSpec.USAGE_BooleanOption", "BOOLEAN", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new BooleanValueHandler( (propName,value) -> m_BoolOption = value );
        cliDefinition = new CLIOptionDefinition( "boolOption", List.of( "--flag", "-f" ), null, "com.test.bean.ConfigBeanSpec.USAGE_BoolOption", "", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new DateValueHandler( (propName,value) -> m_DateArgument = value );
        cliDefinition = new CLIArgumentDefinition( "dateArgument", 1, null, "com.test.bean.ConfigBeanSpec.USAGE_DateArgument", "DATE_ARGUMENT", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new DateValueHandler( (propName,value) -> m_DateOption = value );
        cliDefinition = new CLIOptionDefinition( "dateOption", List.of( "--Date", "-d" ), null, "com.test.bean.ConfigBeanSpec.USAGE_DateOption", "DATE", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new StringValueHandler( (propName,value) -> m_StringArgument = value );
        cliDefinition = new CLIArgumentDefinition( "stringArgument", 0, null, "com.test.bean.ConfigBeanSpec.USAGE_StringArgument", "STRING_ARGUMENT", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );

        valueHandler = new StringValueHandler( (propName,value) -> m_StringOption = value );
        cliDefinition = new CLIOptionDefinition( "stringOption", List.of( "--String", "-s" ), null, "com.test.bean.ConfigBeanSpec.USAGE_StringOption", "STRING", true, valueHandler, false, null );
        m_CLIDefinitions.add( cliDefinition );
    }  //  CLIBean()

        /*---------*\
    ====** Methods **==========================================================
        \*---------*/
    /**
     * {@inheritDoc}
     */
    @Override
    public final void addListener( final ConfigurationChangeListener listener )
    {
        m_ListenerSupport.addListener( listener );
    }  //  addListener()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void dumpParamFileTemplate( final OutputStream outputStream ) throws IOException
    {
        ConfigUtil.dumpParamFileTemplate( m_CLIDefinitions, outputStream );
    }  //  dumpParamFileTemplate()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean getBoolArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BoolArgument;
        }
    }  //  getBoolArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean getBoolOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BoolOption;
        }
    }  //  getBoolOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Boolean getBooleanArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BooleanArgument;
        }
    }  //  getBooleanArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Boolean getBooleanOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BooleanOption;
        }
    }  //  getBooleanOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Date getDateArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_DateArgument;
        }
    }  //  getDateArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Date getDateOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_DateOption;
        }
    }  //  getDateOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Locale getLocale()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Locale;
        }
    }  //  getLocale()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Optional<ResourceBundle> getResourceBundle()
    {
        try( var l = m_ReadLock.lock() )
        {
            return Optional.ofNullable( m_ResourceBundle );
        }
    }  //  getResourceBundle()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String getStringArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_StringArgument;
        }
    }  //  getStringArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String getStringOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_StringOption;
        }
    }  //  getStringOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final ZoneId getTimeZone()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Timezone;
        }
    }  //  getTimeZone()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean isDebug()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Debug;
        }
    }  //  isDebug()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean isTest()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Test;
        }
    }  //  isTest()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean parseCommandLine( final String[] args )
    {
        var retValue = true;
        try( var l = m_WriteLock.lock() )
        {
            ConfigUtil.parseCommandLine( m_CLIDefinitions, args );
        }
        catch( CmdLineException e )
        {
            m_CLIErrorMessage = resolveMessage( getResourceBundle(), e );
            retValue = false;
        }

        //---* Done *----------------------------------------------------------
        return retValue;
    }  //  parseCommandLine()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void printUsage( final OutputStream outputStream, final CharSequence command )
            throws IOException
    {
        ConfigUtil.printUsage( outputStream, getResourceBundle(), command, m_CLIDefinitions );
    }  //  printUsage()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void removeListener( final ConfigurationChangeListener listener )
    {
        m_ListenerSupport.removeListener( listener );
    }  //  removeListener()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Optional<String> retrieveParseErrorMessage()
    {
        return Optional.ofNullable( m_CLIErrorMessage );
    }  //  retrieveParseErrorMessage()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setLocale( final Locale _$locale )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Locale;
            if( isNull( _$locale ) )
            {
                m_Locale = Locale.getDefault();
            }
            else
            {
                m_Locale = _$locale;
            }
            m_ListenerSupport.fireEvent( "locale", oldValue, m_Locale );
        }
    }  //  setLocale()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setResourceBundle( final ResourceBundle _$bundle )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_ResourceBundle;
            m_ResourceBundle = requireNonNullArgument( _$bundle, "_$bundle" );
            m_ListenerSupport.fireEvent( "resourceBundle", oldValue, m_ResourceBundle );
        }
    }  //  setResourceBundle()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setTimeZone( final ZoneId _$timezone )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Timezone;
            if( isNull( _$timezone ) )
            {
                m_Timezone = ZoneId.systemDefault();
            }
            else
            {
                m_Timezone = _$timezone;
            }
            m_ListenerSupport.fireEvent( "timezone", oldValue, m_Timezone );
        }
    }  //  setTimeZone()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String toString()
    {
        var buffer = new StringBuilder().append( getClass().getName() );
        try( var l = m_ReadLock.lock() )
        {
            buffer.append( " [\n" )
                .append( "boolArgument = " ).append( Objects.toString( m_BoolArgument ) ).append( '\n' )
                .append( "booleanArgument = " ).append( Objects.toString( m_BooleanArgument ) ).append( '\n' )
                .append( "booleanOption = " ).append( Objects.toString( m_BooleanOption ) ).append( '\n' )
                .append( "boolOption = " ).append( Objects.toString( m_BoolOption ) ).append( '\n' )
                .append( "dateArgument = " ).append( Objects.toString( m_DateArgument ) ).append( '\n' )
                .append( "dateOption = " ).append( Objects.toString( m_DateOption ) ).append( '\n' )
                .append( "debug = " ).append( Objects.toString( m_Debug ) ).append( '\n' )
                .append( "locale = " ).append( Objects.toString( m_Locale ) ).append( '\n' )
                .append( "resourceBundle = " ).append( BASE_STRINGER.toString( m_ResourceBundle ) ).append( '\n' )
                .append( "stringArgument = " ).append( Objects.toString( m_StringArgument ) ).append( '\n' )
                .append( "stringDefault = " ).append( Objects.toString( getStringDefault() ) ).append( '\n' )
                .append( "stringOption = " ).append( Objects.toString( m_StringOption ) ).append( '\n' )
                .append( "test = " ).append( Objects.toString( m_Test ) ).append( '\n' )
                .append( "timezone = " ).append( Objects.toString( m_Timezone ) ).append( '\n' )
                .append( ']' );
        }
        var retValue = buffer.toString();

        //---* Done *----------------------------------------------------------
        return retValue;
    }  //  toString()
}
//  class CLIBean

/*
 * End of File
 */