package com.test.bean;

import static java.util.prefs.Preferences.userRoot;
import static org.tquadrat.foundation.util.Objects.isNull;
import static org.tquadrat.foundation.util.Objects.requireNonNullArgument;
import static org.tquadrat.foundation.util.Stringer.BASE_STRINGER;

import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.SuppressWarnings;
import java.time.Month;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import org.tquadrat.foundation.annotation.ClassVersion;
import org.tquadrat.foundation.ui.configuration.ConfigurationChangeListener;
import org.tquadrat.foundation.ui.preferences.BooleanAccessor;
import org.tquadrat.foundation.ui.preferences.DateAccessor;
import org.tquadrat.foundation.ui.preferences.EnumAccessor;
import org.tquadrat.foundation.ui.preferences.LocaleAccessor;
import org.tquadrat.foundation.ui.preferences.PrimitiveBooleanAccessor;
import org.tquadrat.foundation.ui.preferences.StringAccessor;
import org.tquadrat.foundation.ui.preferences.ZoneIdAccessor;
import org.tquadrat.foundation.ui.spi.ConfigChangeListenerSupport;
import org.tquadrat.foundation.ui.spi.PreferenceAccessor;
import org.tquadrat.foundation.ui.spi.PreferenceChangeListenerImpl;
import org.tquadrat.foundation.ui.spi.PreferencesException;
import org.tquadrat.foundation.util.AutoLock;
import org.tquadrat.foundation.util.Objects;

/**
 * The configuration bean that implements
 * {@link PreferencesBeanSpec}.
 */
@ClassVersion( sourceVersion = "Generated by 'org.tquadrat.foundation.ui.ap.configgenerator.ConfigurationBeanCodeGenerator' (Version: ${Version}) at 2018-09-11T15:30:00Z", isGenerated = true )
public final class PreferencesBean implements PreferencesBeanSpec
{
        /*-----------*\
    ====** Constants **========================================================
        \*-----------*/
    /**
     * The name for the Preferences instance: {@value}.
     */
    public static final String m_PreferencesRoot = "testRoot";

        /*------------*\
    ====** Attributes **=======================================================
        \*------------*/
    /**
     * The registry for the preferences accessors.
     */
    private final Map<String, PreferenceAccessor<?>> m_AccessorsRegistry = new HashMap<>();

    @SuppressWarnings( "javadoc" )
    private boolean m_BoolArgument = false;

    @SuppressWarnings( "javadoc" )
    private boolean m_BoolOption = false;

    @SuppressWarnings( "javadoc" )
    private Boolean m_BooleanArgument;

    @SuppressWarnings( "javadoc" )
    private Boolean m_BooleanOption;

    @SuppressWarnings( "javadoc" )
    private Date m_DateArgument;

    @SuppressWarnings( "javadoc" )
    private Date m_DateOption;

    @SuppressWarnings( "javadoc" )
    private boolean m_Debug = Boolean.getBoolean( "isDebug" );

    /**
     * The support for the configuration change listener.
     */
    private final ConfigChangeListenerSupport m_ListenerSupport;

    @SuppressWarnings( "javadoc" )
    private Locale m_Locale = Locale.getDefault();

    @SuppressWarnings( "javadoc" )
    private Month m_Month;

    /**
     * The listener for preference changes.
     */
    private final PreferenceChangeListenerImpl m_PreferenceChangeListener;

    /**
     * The read lock.
     */
    private final AutoLock m_ReadLock;

    @SuppressWarnings( "javadoc" )
    private ResourceBundle m_ResourceBundle = null;

    @SuppressWarnings( "javadoc" )
    private String m_StringArgument;

    @SuppressWarnings( "javadoc" )
    private String m_StringOption;

    @SuppressWarnings( "javadoc" )
    private boolean m_Test = Boolean.getBoolean( "isTest" );

    @SuppressWarnings( "javadoc" )
    private ZoneId m_Timezone = ZoneId.systemDefault();

    /**
     * The USER Preferences.
     */
    private final Preferences m_UserPreferences;

    /**
     * The write lock.
     */
    private final AutoLock m_WriteLock;

        /*--------------*\
    ====** Constructors **=====================================================
        \*--------------*/
    /**
     * Creates a new {@code PreferencesBean} instance.
     */
    public PreferencesBean()
    {
        /*
         * Initialise the standard fields
         */
        m_ListenerSupport = new ConfigChangeListenerSupport( this );
        var lock = new ReentrantReadWriteLock();
        m_ReadLock = AutoLock.of( lock.readLock() );
        m_WriteLock = AutoLock.of( lock.writeLock() );

        /*
         * Create the preference change listener.
         */
        m_PreferenceChangeListener = new PreferenceChangeListenerImpl( m_AccessorsRegistry, m_WriteLock );

        /*
         * Retrieve the USER Preferences.
         */
        var root = userRoot();
        m_UserPreferences = root.node( m_PreferencesRoot );
        m_UserPreferences.addPreferenceChangeListener( m_PreferenceChangeListener );

        /*
         * Initialise the Accessors Registry.
         */
        m_AccessorsRegistry.put( "boolArgument", new PrimitiveBooleanAccessor( "boolArgument", () -> m_BoolArgument, p -> m_BoolArgument = p ) );
        m_AccessorsRegistry.put( "booleanArgument", new BooleanAccessor( "booleanArgument", () -> m_BooleanArgument, p -> m_BooleanArgument = p ) );
        m_AccessorsRegistry.put( "booleanOption", new BooleanAccessor( "booleanOption", () -> m_BooleanOption, p -> m_BooleanOption = p ) );
        m_AccessorsRegistry.put( "boolOption", new PrimitiveBooleanAccessor( "boolOption", () -> m_BoolOption, p -> m_BoolOption = p ) );
        m_AccessorsRegistry.put( "dateArgument", new DateAccessor( "dateArgument", () -> m_DateArgument, p -> m_DateArgument = p ) );
        m_AccessorsRegistry.put( "dateOption", new DateAccessor( "dateOption", () -> m_DateOption, p -> m_DateOption = p ) );
        m_AccessorsRegistry.put( "locale", new LocaleAccessor( "locale", () -> m_Locale, p -> m_Locale = p ) );
        m_AccessorsRegistry.put( "month", new EnumAccessor<>( "month", Month.class, () -> m_Month, p -> m_Month = p ) );
        m_AccessorsRegistry.put( "stringArgument", new StringAccessor( "stringArgument", () -> m_StringArgument, p -> m_StringArgument = p ) );
        m_AccessorsRegistry.put( "stringOption", new StringAccessor( "stringOption", () -> m_StringOption, p -> m_StringOption = p ) );
        m_AccessorsRegistry.put( "timezone", new ZoneIdAccessor( "timezone", () -> m_Timezone, p -> m_Timezone = p ) );
    }  //  PreferencesBean()

        /*---------*\
    ====** Methods **==========================================================
        \*---------*/
    /**
     * {@inheritDoc}
     */
    @Override
    public final void addListener( final ConfigurationChangeListener listener )
    {
        m_ListenerSupport.addListener( listener );
    }  //  addListener()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean getBoolArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BoolArgument;
        }
    }  //  getBoolArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean getBoolOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BoolOption;
        }
    }  //  getBoolOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Boolean getBooleanArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BooleanArgument;
        }
    }  //  getBooleanArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Boolean getBooleanOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_BooleanOption;
        }
    }  //  getBooleanOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Date getDateArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_DateArgument;
        }
    }  //  getDateArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Date getDateOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_DateOption;
        }
    }  //  getDateOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Locale getLocale()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Locale;
        }
    }  //  getLocale()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Month getMonth()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Month;
        }
    }  //  getMonth()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Optional<ResourceBundle> getResourceBundle()
    {
        try( var l = m_ReadLock.lock() )
        {
            return Optional.ofNullable( m_ResourceBundle );
        }
    }  //  getResourceBundle()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String getStringArgument()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_StringArgument;
        }
    }  //  getStringArgument()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String getStringOption()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_StringOption;
        }
    }  //  getStringOption()

    /**
     * {@inheritDoc}
     */
    @Override
    public final ZoneId getTimeZone()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Timezone;
        }
    }  //  getTimeZone()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean isDebug()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Debug;
        }
    }  //  isDebug()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean isTest()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Test;
        }
    }  //  isTest()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void loadPreferences()
    {
        try( var l = m_WriteLock.lock() )
        {
            m_UserPreferences.sync();

            m_AccessorsRegistry.get( "boolArgument" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "booleanArgument" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "booleanOption" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "boolOption" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "dateArgument" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "dateOption" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "locale" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "month" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "stringArgument" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "stringOption" ).readPreference( m_UserPreferences );
            m_AccessorsRegistry.get( "timezone" ).readPreference( m_UserPreferences );
        }
        catch( final BackingStoreException e )
        {
            throw new PreferencesException( e );
        }
    }  //  loadPreferences()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Optional<Preferences> obtainUserPreferences()
    {
        return Optional.of( m_UserPreferences );
    }  //  obtainUserPreferences()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void removeListener( final ConfigurationChangeListener listener )
    {
        m_ListenerSupport.removeListener( listener );
    }  //  removeListener()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setLocale( final Locale _$locale )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Locale;
            if( isNull( _$locale ) )
            {
                m_Locale = Locale.getDefault();
            }
            else
            {
                m_Locale = _$locale;
            }
            m_ListenerSupport.fireEvent( "locale", oldValue, m_Locale );
        }
    }  //  setLocale()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setResourceBundle( final ResourceBundle _$bundle )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_ResourceBundle;
            m_ResourceBundle = requireNonNullArgument( _$bundle, "_$bundle" );
            m_ListenerSupport.fireEvent( "resourceBundle", oldValue, m_ResourceBundle );
        }
    }  //  setResourceBundle()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setTimeZone( final ZoneId _$timezone )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Timezone;
            if( isNull( _$timezone ) )
            {
                m_Timezone = ZoneId.systemDefault();
            }
            else
            {
                m_Timezone = _$timezone;
            }
            m_ListenerSupport.fireEvent( "timezone", oldValue, m_Timezone );
        }
    }  //  setTimeZone()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String toString()
    {
        var buffer = new StringBuilder().append( getClass().getName() );
        try( var l = m_ReadLock.lock() )
        {
            buffer.append( " [\n" )
                .append( "boolArgument = " ).append( Objects.toString( m_BoolArgument ) ).append( '\n' )
                .append( "booleanArgument = " ).append( Objects.toString( m_BooleanArgument ) ).append( '\n' )
                .append( "booleanOption = " ).append( Objects.toString( m_BooleanOption ) ).append( '\n' )
                .append( "boolOption = " ).append( Objects.toString( m_BoolOption ) ).append( '\n' )
                .append( "dateArgument = " ).append( Objects.toString( m_DateArgument ) ).append( '\n' )
                .append( "dateOption = " ).append( Objects.toString( m_DateOption ) ).append( '\n' )
                .append( "debug = " ).append( Objects.toString( m_Debug ) ).append( '\n' )
                .append( "locale = " ).append( Objects.toString( m_Locale ) ).append( '\n' )
                .append( "month = " ).append( Objects.toString( m_Month ) ).append( '\n' )
                .append( "resourceBundle = " ).append( BASE_STRINGER.toString( m_ResourceBundle ) ).append( '\n' )
                .append( "stringArgument = " ).append( Objects.toString( m_StringArgument ) ).append( '\n' )
                .append( "stringDefault = " ).append( Objects.toString( getStringDefault() ) ).append( '\n' )
                .append( "stringOption = " ).append( Objects.toString( m_StringOption ) ).append( '\n' )
                .append( "test = " ).append( Objects.toString( m_Test ) ).append( '\n' )
                .append( "timezone = " ).append( Objects.toString( m_Timezone ) ).append( '\n' )
                .append( ']' );
        }
        var retValue = buffer.toString();

        //---* Done *----------------------------------------------------------
        return retValue;
    }  //  toString()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void updatePreferences()
    {
        try( var l = m_WriteLock.lock() )
        {
            m_AccessorsRegistry.get( "boolArgument" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "booleanArgument" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "booleanOption" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "boolOption" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "dateArgument" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "dateOption" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "locale" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "month" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "stringArgument" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "stringOption" ).writePreference( m_UserPreferences );
            m_AccessorsRegistry.get( "timezone" ).writePreference( m_UserPreferences );

            m_UserPreferences.flush();
        }
        catch( final BackingStoreException e )
        {
            throw new PreferencesException( e );
        }
    }  //  updatePreferences()
}
//  class PreferencesBean

/*
 * End of File
 */