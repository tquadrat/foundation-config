package com.test.bean;

import static org.tquadrat.foundation.util.Objects.isNull;
import static org.tquadrat.foundation.util.Objects.requireNonNullArgument;
import static org.tquadrat.foundation.util.Stringer.BASE_STRINGER;

import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.SuppressWarnings;
import java.time.Instant;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.tquadrat.foundation.annotation.ClassVersion;
import org.tquadrat.foundation.ui.configuration.ConfigurationChangeListener;
import org.tquadrat.foundation.ui.spi.ConfigChangeListenerSupport;
import org.tquadrat.foundation.util.AutoLock;
import org.tquadrat.foundation.util.Objects;

/**
 * The configuration bean that implements
 * {@link ConfigBeanSpec}.
 */
@ClassVersion( sourceVersion = "Generated by 'org.tquadrat.foundation.ui.ap.configgenerator.ConfigurationBeanCodeGenerator' (Version: ${Version}) at 2018-09-11T15:30:00Z", isGenerated = true )
public final class ConfigBean implements ConfigBeanSpec
{
        /*------------*\
    ====** Attributes **=======================================================
        \*------------*/
    @SuppressWarnings( "javadoc" )
    private List<String> m_Attributes;

    @SuppressWarnings( "javadoc" )
    private boolean m_Debug = Boolean.getBoolean( "isDebug" );

    @SuppressWarnings( "javadoc" )
    private Map<Instant, String> m_Events;

    /**
     * The support for the configuration change listener.
     */
    private final ConfigChangeListenerSupport m_ListenerSupport;

    @SuppressWarnings( "javadoc" )
    private Locale m_Locale = Locale.getDefault();

    @SuppressWarnings( "javadoc" )
    private Set<String> m_Names;

    /**
     * The read lock.
     */
    private final AutoLock m_ReadLock;

    @SuppressWarnings( "javadoc" )
    private ResourceBundle m_ResourceBundle = null;

    @SuppressWarnings( "javadoc" )
    private boolean m_Test = Boolean.getBoolean( "isTest" );

    @SuppressWarnings( "javadoc" )
    private ZoneId m_Timezone = ZoneId.systemDefault();

    /**
     * The write lock.
     */
    private final AutoLock m_WriteLock;

        /*--------------*\
    ====** Constructors **=====================================================
        \*--------------*/
    /**
     * Creates a new {@code ConfigBean} instance.
     */
    public ConfigBean()
    {
        /*
         * Initialise the standard fields
         */
        m_ListenerSupport = new ConfigChangeListenerSupport( this );
        var lock = new ReentrantReadWriteLock();
        m_ReadLock = AutoLock.of( lock.readLock() );
        m_WriteLock = AutoLock.of( lock.writeLock() );
    }  //  ConfigBean()

        /*---------*\
    ====** Methods **==========================================================
        \*---------*/
    /**
     * {@inheritDoc}
     */
    @Override
    public final void addAttribute( final String _$attribute )
    {
        try( var l = m_WriteLock.lock() )
        {
            List<String> oldValue = null;
            if( isNull( m_Attributes ) )
            {
                m_Attributes = new ArrayList<>();
            }
            else
            {
                oldValue = List.copyOf( m_Attributes );
            }
            m_Attributes.add( requireNonNullArgument( _$attribute, "_$attribute" ) );
            m_ListenerSupport.fireEvent( "attributes", oldValue, List.copyOf( m_Attributes ) );
        }
    }  //  addAttribute()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void addEvent( final Map.Entry<Instant, String> _$event )
    {
        try( var l = m_WriteLock.lock() )
        {
            Map<Instant, String> oldValue = null;
            if( isNull( m_Events ) )
            {
                m_Events = new HashMap<>();
            }
            else
            {
                oldValue = Map.copyOf( m_Events );
            }
            var key = requireNonNullArgument( _$event, "_$event" ).getKey();
            var value = _$event.getValue();
            m_Events.put( requireNonNullArgument( key, "_$event.key" ), requireNonNullArgument( value, "_$event.value" ) );
            m_ListenerSupport.fireEvent( "events", oldValue, Map.copyOf( m_Events ) );
        }
    }  //  addEvent()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void addListener( final ConfigurationChangeListener listener )
    {
        m_ListenerSupport.addListener( listener );
    }  //  addListener()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void addName( final String _$name )
    {
        try( var l = m_WriteLock.lock() )
        {
            Set<String> oldValue = null;
            if( isNull( m_Names ) )
            {
                m_Names = new HashSet<>();
            }
            else
            {
                oldValue = Set.copyOf( m_Names );
            }
            m_Names.add( requireNonNullArgument( _$name, "_$name" ) );
            m_ListenerSupport.fireEvent( "names", oldValue, List.copyOf( m_Names ) );
        }
    }  //  addName()

    /**
     * {@inheritDoc}
     */
    @Override
    public final List<String> getAttributes()
    {
        try( var l = m_ReadLock.lock() )
        {
            return  isNull( m_Attributes ) ? null : List.copyOf( m_Attributes );
        }
    }  //  getAttributes()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Map<Instant, String> getEvents()
    {
        try( var l = m_ReadLock.lock() )
        {
            return isNull( m_Events ) ? null : Map.copyOf( m_Events );
        }
    }  //  getEvents()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Locale getLocale()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Locale;
        }
    }  //  getLocale()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Set<String> getNames()
    {
        try( var l = m_ReadLock.lock() )
        {
            return  isNull( m_Names ) ? null : Set.copyOf( m_Names );
        }
    }  //  getNames()

    /**
     * {@inheritDoc}
     */
    @Override
    public final Optional<ResourceBundle> getResourceBundle()
    {
        try( var l = m_ReadLock.lock() )
        {
            return Optional.ofNullable( m_ResourceBundle );
        }
    }  //  getResourceBundle()

    /**
     * {@inheritDoc}
     */
    @Override
    public final ZoneId getTimeZone()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Timezone;
        }
    }  //  getTimeZone()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean isDebug()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Debug;
        }
    }  //  isDebug()

    /**
     * {@inheritDoc}
     */
    @Override
    public final boolean isTest()
    {
        try( var l = m_ReadLock.lock() )
        {
            return m_Test;
        }
    }  //  isTest()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void removeListener( final ConfigurationChangeListener listener )
    {
        m_ListenerSupport.removeListener( listener );
    }  //  removeListener()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setAttributes( final List<String> _$attributes )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Attributes;
            m_Attributes = _$attributes;
            m_ListenerSupport.fireEvent( "attributes", oldValue, isNull( m_Attributes ) ? null : List.copyOf( m_Attributes ) );
        }
    }  //  setAttributes()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setEvents( final Map<Instant, String> _$events )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Events;
            m_Events = _$events;
            m_ListenerSupport.fireEvent( "events", oldValue, isNull( m_Events ) ? null : Map.copyOf( m_Events ) );
        }
    }  //  setEvents()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setLocale( final Locale _$locale )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Locale;
            if( isNull( _$locale ) )
            {
                m_Locale = Locale.getDefault();
            }
            else
            {
                m_Locale = _$locale;
            }
            m_ListenerSupport.fireEvent( "locale", oldValue, m_Locale );
        }
    }  //  setLocale()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setNames( final Set<String> _$names )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Names;
            m_Names = _$names;
            m_ListenerSupport.fireEvent( "names", oldValue, isNull( m_Names ) ? null : Set.copyOf( m_Names ) );
        }
    }  //  setNames()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setResourceBundle( final ResourceBundle _$bundle )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_ResourceBundle;
            m_ResourceBundle = requireNonNullArgument( _$bundle, "_$bundle" );
            m_ListenerSupport.fireEvent( "resourceBundle", oldValue, m_ResourceBundle );
        }
    }  //  setResourceBundle()

    /**
     * {@inheritDoc}
     */
    @Override
    public final void setTimeZone( final ZoneId _$timezone )
    {
        try( var l = m_WriteLock.lock() )
        {
            var oldValue = m_Timezone;
            if( isNull( _$timezone ) )
            {
                m_Timezone = ZoneId.systemDefault();
            }
            else
            {
                m_Timezone = _$timezone;
            }
            m_ListenerSupport.fireEvent( "timezone", oldValue, m_Timezone );
        }
    }  //  setTimeZone()

    /**
     * {@inheritDoc}
     */
    @Override
    public final String toString()
    {
        var buffer = new StringBuilder().append( getClass().getName() );
        try( var l = m_ReadLock.lock() )
        {
            buffer.append( " [\n" )
                .append( "attributes = " ).append( Objects.toString( m_Attributes ) ).append( '\n' )
                .append( "debug = " ).append( Objects.toString( m_Debug ) ).append( '\n' )
                .append( "events = " ).append( Objects.toString( m_Events ) ).append( '\n' )
                .append( "locale = " ).append( Objects.toString( m_Locale ) ).append( '\n' )
                .append( "names = " ).append( Objects.toString( m_Names ) ).append( '\n' )
                .append( "resourceBundle = " ).append( BASE_STRINGER.toString( m_ResourceBundle ) ).append( '\n' )
                .append( "stringDefault = " ).append( Objects.toString( getStringDefault() ) ).append( '\n' )
                .append( "test = " ).append( Objects.toString( m_Test ) ).append( '\n' )
                .append( "timezone = " ).append( Objects.toString( m_Timezone ) ).append( '\n' )
                .append( ']' );
        }
        var retValue = buffer.toString();

        //---* Done *----------------------------------------------------------
        return retValue;
    }  //  toString()
}
//  class ConfigBean

/*
 * End of File
 */